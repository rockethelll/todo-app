name: Generate a build and push to another branch

on:
  push:
    branches:
      - main

jobs:
  install:
    runs-on: ubuntu-latest
    name: Install Dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install all dependencies
        run: npm install

  cypress-run:
    runs-on: ubuntu-latest
    name: Run Cypress tests
    needs: install # Indicate that this job depends on the installation job
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Cypress tests
        uses: cypress-io/github-action@v5
        # after the test run completes
        # store videos and screenshots
        # NOTE: screeshots will be generated only if E2E tests failed
        # thus we store screenshots and videos only on failure
        # Alternative: create and commit an empty cypress/screenshots folder
        # to always have something to upload
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
      # Test run video was always captured, so this actios uses "always()" condition
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cypress-videos
          path: cypress/videos

  build:
    runs-on: ubuntu-latest
    name: Build and Push
    needs: install # Indique que ce job d√©pend du job d'installation
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build
        run: npm run build

      # Step to create the branch if it doesn't exist
      - name: Ensure build branch exists
        run: |
          git fetch origin
          if git show-ref --verify --quiet refs/heads/build; then
            echo "Branch 'build' already exists."
            git checkout build
          else
            echo "Branch 'build' does not exist. Creating it."
            git checkout -b build
          fi
        shell: bash

      - name: Push to build branch
        uses: s0/git-publish-subdir-action@develop
        env:
          REPO: self
          BRANCH: build
          FOLDER: dist
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MESSAGE: 'Build: ({sha}) {msg}' # The commit message
